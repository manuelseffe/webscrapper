/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Keyword as PrismaKeyword,
  ScrapeResult as PrismaScrapeResult,
} from "@prisma/client";

export class KeywordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.KeywordCountArgs, "select">): Promise<number> {
    return this.prisma.keyword.count(args);
  }

  async keywords<T extends Prisma.KeywordFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.KeywordFindManyArgs>
  ): Promise<PrismaKeyword[]> {
    return this.prisma.keyword.findMany<Prisma.KeywordFindManyArgs>(args);
  }
  async keyword<T extends Prisma.KeywordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.KeywordFindUniqueArgs>
  ): Promise<PrismaKeyword | null> {
    return this.prisma.keyword.findUnique(args);
  }
  async createKeyword<T extends Prisma.KeywordCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.KeywordCreateArgs>
  ): Promise<PrismaKeyword> {
    return this.prisma.keyword.create<T>(args);
  }
  async updateKeyword<T extends Prisma.KeywordUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.KeywordUpdateArgs>
  ): Promise<PrismaKeyword> {
    return this.prisma.keyword.update<T>(args);
  }
  async deleteKeyword<T extends Prisma.KeywordDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.KeywordDeleteArgs>
  ): Promise<PrismaKeyword> {
    return this.prisma.keyword.delete(args);
  }

  async findScrapeResults(
    parentId: string,
    args: Prisma.ScrapeResultFindManyArgs
  ): Promise<PrismaScrapeResult[]> {
    return this.prisma.keyword
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scrapeResults(args);
  }
}
