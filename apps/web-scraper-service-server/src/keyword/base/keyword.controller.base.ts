/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { KeywordService } from "../keyword.service";
import { KeywordCreateInput } from "./KeywordCreateInput";
import { Keyword } from "./Keyword";
import { KeywordFindManyArgs } from "./KeywordFindManyArgs";
import { KeywordWhereUniqueInput } from "./KeywordWhereUniqueInput";
import { KeywordUpdateInput } from "./KeywordUpdateInput";
import { ScrapeResultFindManyArgs } from "../../scrapeResult/base/ScrapeResultFindManyArgs";
import { ScrapeResult } from "../../scrapeResult/base/ScrapeResult";
import { ScrapeResultWhereUniqueInput } from "../../scrapeResult/base/ScrapeResultWhereUniqueInput";

export class KeywordControllerBase {
  constructor(protected readonly service: KeywordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Keyword })
  async createKeyword(
    @common.Body() data: KeywordCreateInput
  ): Promise<Keyword> {
    return await this.service.createKeyword({
      data: data,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Keyword] })
  @ApiNestedQuery(KeywordFindManyArgs)
  async keywords(@common.Req() request: Request): Promise<Keyword[]> {
    const args = plainToClass(KeywordFindManyArgs, request.query);
    return this.service.keywords({
      ...args,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Keyword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async keyword(
    @common.Param() params: KeywordWhereUniqueInput
  ): Promise<Keyword | null> {
    const result = await this.service.keyword({
      where: params,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Keyword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateKeyword(
    @common.Param() params: KeywordWhereUniqueInput,
    @common.Body() data: KeywordUpdateInput
  ): Promise<Keyword | null> {
    try {
      return await this.service.updateKeyword({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          keyword: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Keyword })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteKeyword(
    @common.Param() params: KeywordWhereUniqueInput
  ): Promise<Keyword | null> {
    try {
      return await this.service.deleteKeyword({
        where: params,
        select: {
          createdAt: true,
          id: true,
          keyword: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/scrapeResults")
  @ApiNestedQuery(ScrapeResultFindManyArgs)
  async findScrapeResults(
    @common.Req() request: Request,
    @common.Param() params: KeywordWhereUniqueInput
  ): Promise<ScrapeResult[]> {
    const query = plainToClass(ScrapeResultFindManyArgs, request.query);
    const results = await this.service.findScrapeResults(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        keyword: {
          select: {
            id: true,
          },
        },

        result: true,
        updatedAt: true,

        url: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scrapeResults")
  async connectScrapeResults(
    @common.Param() params: KeywordWhereUniqueInput,
    @common.Body() body: ScrapeResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scrapeResults: {
        connect: body,
      },
    };
    await this.service.updateKeyword({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scrapeResults")
  async updateScrapeResults(
    @common.Param() params: KeywordWhereUniqueInput,
    @common.Body() body: ScrapeResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scrapeResults: {
        set: body,
      },
    };
    await this.service.updateKeyword({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scrapeResults")
  async disconnectScrapeResults(
    @common.Param() params: KeywordWhereUniqueInput,
    @common.Body() body: ScrapeResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scrapeResults: {
        disconnect: body,
      },
    };
    await this.service.updateKeyword({
      where: params,
      data,
      select: { id: true },
    });
  }
}
