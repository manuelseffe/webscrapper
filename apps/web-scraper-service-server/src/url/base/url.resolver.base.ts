/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Url } from "./Url";
import { UrlCountArgs } from "./UrlCountArgs";
import { UrlFindManyArgs } from "./UrlFindManyArgs";
import { UrlFindUniqueArgs } from "./UrlFindUniqueArgs";
import { CreateUrlArgs } from "./CreateUrlArgs";
import { UpdateUrlArgs } from "./UpdateUrlArgs";
import { DeleteUrlArgs } from "./DeleteUrlArgs";
import { ScrapeResultFindManyArgs } from "../../scrapeResult/base/ScrapeResultFindManyArgs";
import { ScrapeResult } from "../../scrapeResult/base/ScrapeResult";
import { UrlService } from "../url.service";
@graphql.Resolver(() => Url)
export class UrlResolverBase {
  constructor(protected readonly service: UrlService) {}

  async _urlsMeta(
    @graphql.Args() args: UrlCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Url])
  async urls(@graphql.Args() args: UrlFindManyArgs): Promise<Url[]> {
    return this.service.urls(args);
  }

  @graphql.Query(() => Url, { nullable: true })
  async url(@graphql.Args() args: UrlFindUniqueArgs): Promise<Url | null> {
    const result = await this.service.url(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Url)
  async createUrl(@graphql.Args() args: CreateUrlArgs): Promise<Url> {
    return await this.service.createUrl({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Url)
  async updateUrl(@graphql.Args() args: UpdateUrlArgs): Promise<Url | null> {
    try {
      return await this.service.updateUrl({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Url)
  async deleteUrl(@graphql.Args() args: DeleteUrlArgs): Promise<Url | null> {
    try {
      return await this.service.deleteUrl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ScrapeResult], { name: "scrapeResults" })
  async findScrapeResults(
    @graphql.Parent() parent: Url,
    @graphql.Args() args: ScrapeResultFindManyArgs
  ): Promise<ScrapeResult[]> {
    const results = await this.service.findScrapeResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
