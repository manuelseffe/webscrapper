/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Url as PrismaUrl,
  ScrapeResult as PrismaScrapeResult,
} from "@prisma/client";

export class UrlServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UrlCountArgs, "select">): Promise<number> {
    return this.prisma.url.count(args);
  }

  async urls<T extends Prisma.UrlFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UrlFindManyArgs>
  ): Promise<PrismaUrl[]> {
    return this.prisma.url.findMany<Prisma.UrlFindManyArgs>(args);
  }
  async url<T extends Prisma.UrlFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UrlFindUniqueArgs>
  ): Promise<PrismaUrl | null> {
    return this.prisma.url.findUnique(args);
  }
  async createUrl<T extends Prisma.UrlCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UrlCreateArgs>
  ): Promise<PrismaUrl> {
    return this.prisma.url.create<T>(args);
  }
  async updateUrl<T extends Prisma.UrlUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UrlUpdateArgs>
  ): Promise<PrismaUrl> {
    return this.prisma.url.update<T>(args);
  }
  async deleteUrl<T extends Prisma.UrlDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UrlDeleteArgs>
  ): Promise<PrismaUrl> {
    return this.prisma.url.delete(args);
  }

  async findScrapeResults(
    parentId: string,
    args: Prisma.ScrapeResultFindManyArgs
  ): Promise<PrismaScrapeResult[]> {
    return this.prisma.url
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scrapeResults(args);
  }
}
