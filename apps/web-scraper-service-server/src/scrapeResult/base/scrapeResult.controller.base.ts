/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScrapeResultService } from "../scrapeResult.service";
import { ScrapeResultCreateInput } from "./ScrapeResultCreateInput";
import { ScrapeResult } from "./ScrapeResult";
import { ScrapeResultFindManyArgs } from "./ScrapeResultFindManyArgs";
import { ScrapeResultWhereUniqueInput } from "./ScrapeResultWhereUniqueInput";
import { ScrapeResultUpdateInput } from "./ScrapeResultUpdateInput";

export class ScrapeResultControllerBase {
  constructor(protected readonly service: ScrapeResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScrapeResult })
  async createScrapeResult(
    @common.Body() data: ScrapeResultCreateInput
  ): Promise<ScrapeResult> {
    return await this.service.createScrapeResult({
      data: {
        ...data,

        keyword: data.keyword
          ? {
              connect: data.keyword,
            }
          : undefined,

        url: data.url
          ? {
              connect: data.url,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        keyword: {
          select: {
            id: true,
          },
        },

        result: true,
        updatedAt: true,

        url: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScrapeResult] })
  @ApiNestedQuery(ScrapeResultFindManyArgs)
  async scrapeResults(@common.Req() request: Request): Promise<ScrapeResult[]> {
    const args = plainToClass(ScrapeResultFindManyArgs, request.query);
    return this.service.scrapeResults({
      ...args,
      select: {
        createdAt: true,
        id: true,

        keyword: {
          select: {
            id: true,
          },
        },

        result: true,
        updatedAt: true,

        url: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScrapeResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scrapeResult(
    @common.Param() params: ScrapeResultWhereUniqueInput
  ): Promise<ScrapeResult | null> {
    const result = await this.service.scrapeResult({
      where: params,
      select: {
        createdAt: true,
        id: true,

        keyword: {
          select: {
            id: true,
          },
        },

        result: true,
        updatedAt: true,

        url: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScrapeResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScrapeResult(
    @common.Param() params: ScrapeResultWhereUniqueInput,
    @common.Body() data: ScrapeResultUpdateInput
  ): Promise<ScrapeResult | null> {
    try {
      return await this.service.updateScrapeResult({
        where: params,
        data: {
          ...data,

          keyword: data.keyword
            ? {
                connect: data.keyword,
              }
            : undefined,

          url: data.url
            ? {
                connect: data.url,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          keyword: {
            select: {
              id: true,
            },
          },

          result: true,
          updatedAt: true,

          url: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScrapeResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScrapeResult(
    @common.Param() params: ScrapeResultWhereUniqueInput
  ): Promise<ScrapeResult | null> {
    try {
      return await this.service.deleteScrapeResult({
        where: params,
        select: {
          createdAt: true,
          id: true,

          keyword: {
            select: {
              id: true,
            },
          },

          result: true,
          updatedAt: true,

          url: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
