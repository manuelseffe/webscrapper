/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ScrapeResult as PrismaScrapeResult,
  Keyword as PrismaKeyword,
  Url as PrismaUrl,
} from "@prisma/client";

export class ScrapeResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScrapeResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scrapeResult.count(args);
  }

  async scrapeResults<T extends Prisma.ScrapeResultFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeResultFindManyArgs>
  ): Promise<PrismaScrapeResult[]> {
    return this.prisma.scrapeResult.findMany<Prisma.ScrapeResultFindManyArgs>(
      args
    );
  }
  async scrapeResult<T extends Prisma.ScrapeResultFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeResultFindUniqueArgs>
  ): Promise<PrismaScrapeResult | null> {
    return this.prisma.scrapeResult.findUnique(args);
  }
  async createScrapeResult<T extends Prisma.ScrapeResultCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeResultCreateArgs>
  ): Promise<PrismaScrapeResult> {
    return this.prisma.scrapeResult.create<T>(args);
  }
  async updateScrapeResult<T extends Prisma.ScrapeResultUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeResultUpdateArgs>
  ): Promise<PrismaScrapeResult> {
    return this.prisma.scrapeResult.update<T>(args);
  }
  async deleteScrapeResult<T extends Prisma.ScrapeResultDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapeResultDeleteArgs>
  ): Promise<PrismaScrapeResult> {
    return this.prisma.scrapeResult.delete(args);
  }

  async getKeyword(parentId: string): Promise<PrismaKeyword | null> {
    return this.prisma.scrapeResult
      .findUnique({
        where: { id: parentId },
      })
      .keyword();
  }

  async getUrl(parentId: string): Promise<PrismaUrl | null> {
    return this.prisma.scrapeResult
      .findUnique({
        where: { id: parentId },
      })
      .url();
  }
}
